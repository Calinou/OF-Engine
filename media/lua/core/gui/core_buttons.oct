/**<
    Various button widgets.

    Author:
        q66 <quaker66@gmail.com>

    License:
        See COPYING.txt.
*/

import core.events.signal

/// Module: core
var M = require("core.gui.core")

var emit = signal.emit

// widget types
var register_type = M.register_type

// base widgets
var Widget = M.get_type("Widget")

// setters
var gen_setter = M.gen_setter

// keys
var key = M.key

var clicked_states = {
    [key.MOUSELEFT   ] = "clicked_left",
    [key.MOUSEMIDDLE ] = "clicked_middle",
    [key.MOUSERIGHT  ] = "clicked_right",
    [key.MOUSEBACK   ] = "clicked_back",
    [key.MOUSEFORWARD] = "clicked_forward"
}

/**
    A button has five states, "default", "hovering", "clicked_left",
    "clicked_right" and "clicked_middle". On click it emits the "click" signal
    on itself (which is handled by $Widget, the button itself doesn't do
    anything).
*/
M.Button = register_type("Button", Widget, {
    choose_state = func(self)
        return clicked_states[self:is_clicked()] or
            (self:is_hovering() and "hovering" or "default")
    end,

    /**
        Buttons can take be hovered on. Assuming `self:target(cx, cy)` returns
        anything, this returns itself. That means if a child can be targeted,
        the hovered widget will be the button itself.
    */
    hover = func(self, cx, cy)
        return self:target(cx, cy) and self
    end,

    /// See $hover.
    click = func(self, cx, cy)
        return self:target(cx, cy) and self
    end
})
var Button = M.Button

/**
    Like $Button, but adds a new state, "menu", when a menu is currently
    opened using this button.
*/
M.MenuButton = register_type("MenuButton", Button, {
    choose_state = func(self)
        return self:get_menu() != nil and "menu" or Button.choose_state(self)
    end
})

/**
    Derived from $Button. The space key serves the same purpose as clicking
    (when focused).

    Properties:
        - condition - a callable object, if it returns something that evaluates
          as true, either the "toggled" or "toggled_hovering" state is used,
          otherwise "default" or "default_hovering" is used. The condition
          is passed the current object as an argument.
*/
M.Toggle = register_type("Toggle", Button, {
    __ctor = func(self, kwargs)
        kwargs = kwargs or {}
        self.condition = kwargs.condition
        return Button.__ctor(self, kwargs)
    end,

    choose_state = func(self)
        var h, f = self:is_hovering(), self:is_focused()
        return (self.condition and self:condition() and
            (h and "toggled_hovering" or (f and "toggled_focused"
                or "toggled")) or
            (h and "default_hovering" or (f and "default_focused"
                or "default")))
    end,

    key = func(self, code, isdown)
        if self:is_focused() and code == key.SPACE do
            emit(self, isdown and "clicked" or "released", -1, -1, code)
            return true
        end
        return Widget.key(self, code, isdown)
    end,

    /// Function: set_condition
    set_condition = gen_setter "condition"
})
