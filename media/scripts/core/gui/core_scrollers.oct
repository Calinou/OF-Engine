/**<
    Widgets related to scrolling - scrollers, scrollbars and so on.

    Author:
        q66 <quaker66@gmail.com>

    License:
        See COPYING.txt.
*/

import capi
import core.events.signal

var get_curtime = capi.get_curtime

from std.math import min, max, clamp

var emit  = signal.emit

/// Module: core
import core.gui.core as M

// consts
var key = M.key

// widget types
var register_type = M.register_type

// base widgets
var Widget = M.get_type("Widget")

// setters
var gen_setter = M.gen_setter

// orientation
var orient = M.orient

// alignment/clamping
var adjust = M.adjust

var Clipper = M.Clipper

/**
    Derived from $Clipper. Provides a scrollable area without scrollbars.
    There are scrollbars provided further below. Text editors implement
    the same interface as scrollers, thus they can be used as scrollers.
*/
M.Scroller = register_type("Scroller", Clipper, {
    __ctor = func(self, kwargs)
        kwargs = kwargs or {}

        self.offset_h = 0
        self.offset_v = 0
        self.can_scroll = false

        return Clipper.__ctor(self, kwargs)
    end,

    /**
        In addition to the regular clear it takes care of unlinking
        the scrollbars.
    */
    clear = func(self)
        self:bind_h_scrollbar()
        self:bind_v_scrollbar()
        return Clipper.clear(self)
    end,

    layout = func(self)
        Clipper.layout(self)
        self.offset_h = min(self.offset_h, self:get_h_limit())
        self.offset_v = min(self.offset_v, self:get_v_limit())
    end,

    target = func(self, cx, cy)
        var oh, ov, vw, vh = self.offset_h, self.offset_v,
            self.virt_w, self.virt_h

        if ((cx + oh) >= vw) or ((cy + ov) >= vh) do return undef end
        return Widget.target(self, cx + oh, cy + ov)
    end,

    hover = func(self, cx, cy)
        var oh, ov, vw, vh = self.offset_h, self.offset_v,
            self.virt_w, self.virt_h

        if ((cx + oh) >= vw) or ((cy + ov) >= vh) do
            self.can_scroll = false
            return undef
        end

        self.can_scroll = true
        return Widget.hover(self, cx + oh, cy + ov) or self
    end,

    click = func(self, cx, cy, code)
        var oh, ov, vw, vh = self.offset_h, self.offset_v,
            self.virt_w, self.virt_h

        if ((cx + oh) >= vw) or ((cy + ov) >= vh) do return undef end
        return Widget.click(self, cx + oh, cy + ov, code)
    end,

    /**
        A mouse scroll wheel handler. It scrolls in the direction of its
        scrollbar. If both are present, vertical takes precedence. If none
        is present, vertical is used with the default arrow_speed of 0.5.
    */
    key_hover = func(self, code, isdown)
        var m4, m5 = key.MOUSEWHEELUP, key.MOUSEWHEELDOWN
        if code != m4 and code != m5 do
            return Widget.key_hover(self, code, isdown)
        end

        var  sb = self.v_scrollbar or self.h_scrollbar
        if not self.can_scroll do return false end
        if not isdown do return true end

        var adjust = (code == m4 and -0.2 or 0.2) * (sb and sb.arrow_speed
            or 0.5)
        if not self.h_scrollbar do
            self:scroll_v(adjust)
        else
            self:scroll_h(adjust)
        end

        return true
    end,

    draw = func(self, sx, sy)
        if (self.clip_w != 0 and self.virt_w > self.clip_w) or
           (self.clip_h != 0 and self.virt_h > self.clip_h)
        do
            self:get_root():clip_push(sx, sy, self.w, self.h)
            Widget.draw(self, sx - self.offset_h, sy - self.offset_v)
            self:get_root():clip_pop()
        else
            return Widget.draw(self, sx, sy)
        end
    end,

    /**
        Binds a horizontal scrollbar widget to the scroller. It sets up both
        sides appropriately. You can do this from the scrollbar side as well.
        Calling with undef unlinks the scrollbar and returns it.
    */
    bind_h_scrollbar = func(self, sb)
        if not sb do
            sb = self.h_scrollbar
            if not sb do return undef end
            sb.scroller, self.h_scrollbar = undef, undef
            return sb
        end
        self.h_scrollbar = sb
        sb.scroller = self
    end,

    /**
        Binds a vertical scrollbar widget to the scroller. It sets up both
        sides appropriately. You can do this from the scrollbar side as well.
        Calling with undef unlinks the scrollbar and returns it.
    */
    bind_v_scrollbar = func(self, sb)
        if not sb do
            sb = self.v_scrollbar
            if not sb do return undef end
            sb.scroller, self.v_scrollbar = undef, undef
            return sb
        end
        self.v_scrollbar = sb
        sb.scroller = self
    end,

    /*
        Returns the horizontal offset limit, that is, the actual width of
        the contents minus the clipper width.
    */
    get_h_limit = func(self) return max(self.virt_w - self.w, 0) end,

    /// See $get_h_limit.
    get_v_limit = func(self) return max(self.virt_h - self.h, 0) end,

    /**
        Returns the horizontal offset, that is, the portion of the actual
        size of the contents the scroller offsets by. It's computed as
        actual_offset / max(size_of_container, size_of_contents).
    */
    get_h_offset = func(self)
        return self.offset_h / max(self.virt_w, self.w)
    end,

    /// See $get_h_offset.
    get_v_offset = func(self)
        return self.offset_v / max(self.virt_h, self.h)
    end,

    /**
        Returns the horizontal scale, that is,
        size_of_container / max(size_of_container, size_of_contents).
    */
    get_h_scale = func(self) return self.w / max(self.virt_w, self.w) end,

    /// See $get_h_scale.
    get_v_scale = func(self) return self.h / max(self.virt_h, self.h) end,

    /**
        Sets the horizontal scroll offset. Takes the "real" offset, that is,
        actual_offset as $get_h_offset describes it (offset 1 would be the
        full screen height). Emits the h_scroll,changed signal on self with
        `self:get_h_offset()` as a parameter.
    */
    set_h_scroll = func(self, hs)
        self.offset_h = clamp(hs, 0, self:get_h_limit())
        emit(self, "h_scroll,changed", self:get_h_offset())
    end,

    /// See $set_h_scroll.
    set_v_scroll = func(self, vs)
        self.offset_v = clamp(vs, 0, self:get_v_limit())
        emit(self, "v_scroll,changed", self:get_v_offset())
    end,

    /**
        Like $set_h_scroll, but works with deltas (adds the given value
        to the actual offset).
    */
    scroll_h = func(self, hs) self:set_h_scroll(self.offset_h + hs) end,

    /// See $scroll_h.
    scroll_v = func(self, vs) self:set_v_scroll(self.offset_v + vs) end
})

var ScrollButton

/**
    A base scrollbar widget type. This one is not of much use.

    Scrollbars can be used with widgets that implement the right interface -
    scrollers and text editors (including fields).

    Properties:
        - arrow_size - the length of the arrow part of the scrollbar. Defaults
          to 0.
        - arrow_speed - mouse scroll is 0.2 * arrow_speed, arrow scroll is
          frame_time * arrow_speed, when used with text editors mouse scroll
          is 6 * fonth * arrow_speed. Defaults to 0.5.
*/
M.Scrollbar = register_type("Scrollbar", Widget, {
    orient = -1,

    __ctor = func(self, kwargs)
        kwargs = kwargs or {}
        self.arrow_size  = kwargs.arrow_size  or 0
        self.arrow_speed = kwargs.arrow_speed or 0.5
        self.arrow_dir   = 0

        return Widget.__ctor(self, kwargs)
    end,

    /**
        In addition to the regular clear it takes care of unlinking
        the scroller.
    */
    clear = func(self)
        self:bind_scroller()
        return Widget.clear(self)
    end,

    /**
        This one does nothing, it's further overloaded in horizontal and
        vertical variants. It takes care of linking a scroller to itself
        as well as linking this scrollbar to the scroller. Calling with
        undef unlinks the scroller and returns it.
    */
    bind_scroller = func(self, sc) end,

    choose_direction = func(self, cx, cy)
        return 0
    end,

    /// Scrollbars can be hovered on.
    hover = func(self, cx, cy)
        return Widget.hover(self, cx, cy) or self
    end,

    /**
        Scrollbars can be clicked on assuming none of the children want
        to be clicked on.
    */
    click = func(self, cx, cy, code)
        return Widget.click(self, cx, cy, code) or
                     (self:target(cx, cy) and self or undef)
    end,

    scroll_to = func(self, cx, cy) end,

    /**
        Mouse scrolling on a scrollbar results in the scroller being scrolled
        by 0.2 in the right direction depending on the scrollbar type.
    */
    key_hover = func(self, code, isdown)
        var m4, m5 = key.MOUSEWHEELUP, key.MOUSEWHEELDOWN
        if code != m4 and code != m5 do
            return Widget.key_hover(self, code, isdown)
        end

        var  sc = self.scroller
        if not sc or not sc.can_scroll do return false end
        if not isdown do return true end

        var adjust = (code == m4 and -0.2 or 0.2) * self.arrow_speed
        if self.orient == 1 do
            sc:scroll_v(adjust)
        else
            sc:scroll_h(adjust)
        end

        return true
    end,

    /**
        Clicking inside the scrollbar area but outside the arrow area jumps
        in the scroller.
    */
    clicked = func(self, cx, cy, code)
        if code == key.MOUSELEFT do
            var d = self:choose_direction(cx, cy)
            self.arrow_dir = d
            if d == 0 do
                self:scroll_to(cx, cy)
            end
        end
        return Widget.clicked(self, cx, cy, code)
    end,

    arrow_scroll = func(self, d) end,

    holding = func(self, cx, cy, code)
        if code == key.MOUSELEFT do
            var d = self:choose_direction(cx, cy)
            self.arrow_dir = d
            if d != 0 do self:arrow_scroll(d) end
        end
        Widget.holding(self, cx, cy, code)
    end,

    hovering = func(self, cx, cy)
        if not self:is_clicked(key.MOUSELEFT) do
            self.arrow_dir = self:choose_direction(cx, cy)
        end
        Widget.hovering(self, cx, cy)
    end,

    move_button = func(self, o, fromx, fromy, tox, toy) end,

    /// Function: set_arrow_size
    set_arrow_size = gen_setter "arrow_size",

    /// Function: set_arrow_speed
    set_arrow_speed = gen_setter "arrow_speed"
})
var Scrollbar = M.Scrollbar

var clicked_states = {
    $(key.MOUSELEFT   ) = "clicked_left",
    $(key.MOUSEMIDDLE ) = "clicked_middle",
    $(key.MOUSERIGHT  ) = "clicked_right",
    $(key.MOUSEBACK   ) = "clicked_back",
    $(key.MOUSEFORWARD) = "clicked_forward"
}

/**
    A scroll button you can put inside a scrollbar and drag. The scrollbar
    will adjust the button width (in case of horizontal scrollbar) and height
    (in case of vertical scrollbar) depending on the scroller contents.

    A scroll button has seven states, "default", "hovering", "clicked_left",
    "clicked_right", "clicked_middle", "clicked_back" and "clicked_forward".
*/
M.ScrollButton = register_type("ScrollButton", Widget, {
    __ctor = func(self, kwargs)
        self.offset_h = 0
        self.offset_v = 0

        return Widget.__ctor(self, kwargs)
    end,

    choose_state = func(self)
        return clicked_states[self:is_clicked()] or
            (self:is_hovering() and "hovering" or "default")
    end,

    hover = func(self, cx, cy)
        return self:target(cx, cy) and self or undef
    end,

    click = func(self, cx, cy)
        return self:target(cx, cy) and self or undef
    end,

    holding = func(self, cx, cy, code)
        var p = self.parent
        if p and code == key.MOUSELEFT and p.type == Scrollbar.type do
            p.arrow_dir = 0
            p:move_button(self, self.offset_h, self.offset_v, cx, cy)
        end
        Widget.holding(self, cx, cy, code)
    end,

    clicked = func(self, cx, cy, code)
        if code == key.MOUSELEFT do
            self.offset_h = cx
            self.offset_v = cy
        end
        return Widget.clicked(self, cx, cy, code)
    end
})
ScrollButton = M.ScrollButton

/**
    A specialization of $Scrollbar. Has the "orient" member set to
    the HORIZONTAL field of $orient. Overloads some of the Scrollbar
    methods specifically for horizontal scrolling.

    Has thirteen states - "default", "(left|right)_hovering",
    "(left|right)_clicked_(left|right|middle|back|forward)".
*/
M.HScrollbar = register_type("HScrollbar", Scrollbar, {
    orient = orient.HORIZONTAL,

    bind_scroller = func(self, sc)
        if not sc do
            sc = self.scroller
            if not sc do return undef end
            sc.h_scrollbar = undef
            return sc
        end
        self.scroller = sc
        sc.h_scrollbar = self
    end,

    choose_state = func(self)
        var ad = self.arrow_dir

        if ad == -1 do
            var clicked = clicked_states[self:is_clicked()]
            return clicked and "left_" ~ clicked or
                (self:is_hovering() and "left_hovering" or "default")
        elif ad == 1 do
            var clicked = clicked_states[self:is_clicked()]
            return clicked and "right_" ~ clicked or
                (self:is_hovering() and "right_hovering" or "default")
        end
        return "default"
    end,

    choose_direction = func(self, cx, cy)
        var asz = self.arrow_size
        return (cx < asz) and -1 or (cx >= (self.w - asz) and 1 or 0)
    end,

    arrow_scroll = func(self, d)
        var  scroll = self.scroller
        if not scroll do return end
        scroll:scroll_h(d * self.arrow_speed * (get_curtime() / 1000))
    end,

    scroll_to = func(self, cx, cy)
        var  scroll = self.scroller
        if not scroll do return end

        var  btn = self:find_child(ScrollButton.type, undef, false)
        if not btn do return end

        var asz = self.arrow_size

        var bscale = (max(self.w - 2 * asz, 0) - btn.w) /
            (1 - scroll:get_h_scale())

        var offset = (bscale > 0.001) and (cx - asz) / bscale or 0

        scroll.set_h_scroll(scroll, offset * scroll.virt_w)
    end,

    adjust_children = func(self)
        var  scroll = self.scroller
        if not scroll do
            Widget.adjust_children(self)
            return
        end

        var  btn = self:find_child(ScrollButton.type, undef, false)
        if not btn do
            Widget.adjust_children(self)
            return
        end

        var asz = self.arrow_size

        var sw, btnw = self.w, btn.w

        var bw = max(sw - 2 * asz, 0) * scroll:get_h_scale()
        btn.w  = max(btnw, bw)

        var bscale = (scroll:get_h_scale() < 1) and
            (max(sw - 2 * asz, 0) - btn.w) / (1 - scroll:get_h_scale()) or 1

        btn.x = asz + scroll:get_h_offset() * bscale
        btn.adjust = btn.adjust & ~adjust.ALIGN_HMASK

        Widget.adjust_children(self)
    end,

    move_button = func(self, o, fromx, fromy, tox, toy)
        self:scroll_to(o.x + tox - fromx, o.y + toy)
    end
}, Scrollbar.type)

/**
    See $HScrollbar above. Has states "default", "(up|down)_hovering" and
    "(up|down)_clicked_(left|right|middle|back|forward)".
*/
M.VScrollbar = register_type("VScrollbar", Scrollbar, {
    orient = orient.VERTICAL,

    bind_scroller = func(self, sc)
        if not sc do
            sc = self.scroller
            if not sc do return undef end
            sc.v_scrollbar = undef
            return sc
        end
        self.scroller = sc
        sc.v_scrollbar = self
    end,

    choose_state = func(self)
        var ad = self.arrow_dir

        if ad == -1 do
            var clicked = clicked_states[self:is_clicked()]
            return clicked and "up_" ~ clicked or
                (self:is_hovering() and "up_hovering" or "default")
        elif ad == 1 do
            var clicked = clicked_states[self:is_clicked()]
            return clicked and "down_" ~ clicked or
                (self:is_hovering() and "down_hovering" or "default")
        end
        return "default"
    end,

    choose_direction = func(self, cx, cy)
        var asz = self.arrow_size
        return (cy < asz) and -1 or (cy >= (self.h - asz) and 1 or 0)
    end,

    arrow_scroll = func(self, d)
        var  scroll = self.scroller
        if not scroll do return end
        scroll:scroll_v(d * self.arrow_speed * (get_curtime() / 1000))
    end,

    scroll_to = func(self, cx, cy)
        var  scroll = self.scroller
        if not scroll do return end

        var  btn = self:find_child(ScrollButton.type, undef, false)
        if not btn do return end

        var asz = self.arrow_size

        var bscale = (max(self.h - 2 * asz, 0) - btn.h) /
            (1 - scroll:get_v_scale())

        var offset = (bscale > 0.001) and
            (cy - asz) / bscale or 0

        scroll:set_v_scroll(offset * scroll.virt_h)
    end,

    adjust_children = func(self)
        var  scroll = self.scroller
        if not scroll do
            Widget.adjust_children(self)
            return
        end

        var  btn = self:find_child(ScrollButton.type, undef, false)
        if not btn do
            Widget.adjust_children(self)
            return
        end

        var asz = self.arrow_size

        var sh, btnh = self.h, btn.h

        var bh = max(sh - 2 * asz, 0) * scroll:get_v_scale()

        btn.h = max(btnh, bh)

        var bscale = (scroll:get_v_scale() < 1) and
            (max(sh - 2 * asz, 0) - btn.h) / (1 - scroll:get_v_scale()) or 1

        btn.y = asz + scroll:get_v_offset() * bscale
        btn.adjust = btn.adjust & ~adjust.ALIGN_VMASK

        Widget.adjust_children(self)
    end,

    move_button = func(self, o, fromx, fromy, tox, toy)
        self:scroll_to(o.x + tox, o.y + toy - fromy)
    end
}, Scrollbar.type)
