/**<
    OctaScript table extensions.

    Author:
        q66 <quaker66@gmail.com>

    License:
        See COPYING.txt.
*/

//
// Object system
//

import std.table
from std.table import setmt

/**
    Provides the basis for any object in OF. It implements a simple prototypal
    OO system.
*/
table.Object = {
    /**
        When you call an object, it's identical to $clone, but it also
        tries to call a __ctor field of the current object on the result,
        passing in any extra arguments (besides the new object as the first
        argument).
    */
    __call: func(self, ...)
        var r = {
            __index: self, __proto: self, __call: self.__call,
            __tostring: self.__tostring
        }
        setmt(r, r)
        if self.__ctor do self::__ctor(r, ...) end
        return r
    end,

    /**
        "Clones" an object. It's not an actual clone as it's delegative
        (doesn't copy, only hooks a metatable). Thanks to its delegative
        nature changes in parents also reflect in children.

        Arguments:
            tbl - optionally a table to serve as a basis for the new clone
            (this will modify the table and hook its metatable properly).

        Returns:
            The new clone.
    */
    clone: func(self, tbl)
        tbl = tbl or {}
        tbl.__index, tbl.__proto, tbl.__call = self, self, self.__call
        if not tbl.__tostring do tbl.__tostring = self.__tostring end
        setmt(tbl, tbl)
        return tbl
    end,

    /**
        Checks whether the current object is a either equal to the given
        object, is a child of the given object, or a child of a child
        of the given object, or anything down the tree.
    */
    is_a: func(self, base)
        if self == base do return true end
        var pt = self.__proto
        var is = (pt == base)
        while not is and pt do
            pt = pt.__proto
            is = (pt == base)
        end
        return is
    end,

    /**
        The default tostring result is in format "Object: NAME" where NAME
        is self.name.
    */
    __tostring: func(self)
        return ("Object: %s").format(self.name or "unnamed")
    end
}
