/**<
    OctaScript string extensions.

    Author:
        q66 <quaker66@gmail.com>

    License:
        See COPYING.txt.
*/

import std.string
from std.table import concat as tconcat

/**
    Splits a string using the given parameters.

    Arguments:
        - str - the given string.
        - delim - the delimiter to use (defaults to ",")

    ```
    var a = "abc|def|ghi|jkl"
    var b = split(a, '|')
    assert(table.concat(b) == "abcdefghijkl")
    ```
*/
string.split = func(str, delim)
    delim = delim or ","
    var r = {}
    for ch in str:gmatch("([^" ~ delim ~ "]+)") do
        r[#r + 1] = ch
    end
    return r
end

/**
    Deletes a substring in a string. Returns the new string.

    Arguments:
        - str - the given string.
        - start - the starting index to delete.
        - count - the number of characters to delete.
*/
string.del = func(str, start, count)
    return tconcat { str:sub(1, start - 1), str:sub(start + count) }
end

/**
    Inserts a substring into the string. Returns the new string.

    Arguments:
        - str - the given string.
        - idx - the index where to start the inserted substring.
        - new - the string to insert.
*/
string.insert = func(str, idx, new)
    return tconcat { str:sub(1, idx - 1), new, str:sub(idx) }
end

from std.table import setmt

var str_escapes = setmt({
    ["\n"] = "\\n", ["\r"] = "\\r",
    ["\a"] = "\\a", ["\b"] = "\\b",
    ["\f"] = "\\f", ["\t"] = "\\t",
    ["\v"] = "\\v", ["\\"] = "\\\\",
    ['"' ] = '\\"', ["'" ] = "\\'"
}, {
    __index = func(self, c) return ("\\%03d"):format(c:byte()) end
})

/**
    Escapes a string. Works similarly to the OctaScript %q format but it tries
    to be more compact (e.g. uses \r instead of \13), doesn't insert newlines
    in the result (\n instead) and automatically decides if to delimit the
    result with ' or " depending on the number of nested ' and " (uses the
    one that needs less escaping).
*/
string.escape = func(s)
    // a space optimization: decide which string quote to
    // use as a delimiter (the one that needs less escaping)
    var nsq, ndq = 0, 0
    for c in s:gmatch("'") do nsq = nsq + 1 end
    for c in s:gmatch('"') do ndq = ndq + 1 end
    var sd = (ndq > nsq) and "'" or '"'
    return sd ~ s:gsub("[\\" ~ sd ~ "%z\001-\031]", str_escapes) ~ sd
end
