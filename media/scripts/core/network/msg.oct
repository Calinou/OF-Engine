/**<
    Provides an API to the OctaForge message system.

    Author:
        q66 <quaker66@gmail.com>

    License:
        See COPYING.txt.
*/

/// Module: msg
var M = {}

from std.util import assert
from std.conv import tonumber
from core.externals import set as setext

import capi

var message_types = {}
var current_mid = 2048

/**
    A constant (value -1) used when sending messages. Specifying this constant
    means that the message will be sent to all clients.
*/
M.ALL_CLIENTS = -1

/**
    Registers a message receiver and returns its ID.
*/
M.register = func(receiver) {
    message_types[current_mid] = receiver
    current_mid += 1
    return current_mid - 1
}

import std.ffi

ffi::cdef("typedef struct ucharbuf ucharbuf;")

ffi::metatype("ucharbuf", {
    __index: {
    }
})

var ubuft = ffi["typeof"]("ucharbuf")

setext("message_receive", func(tp, receiver, sender, p) {
    tp = tonumber(tp)
    var recv = message_types[tp]
    if  recv == undef {
        return false
    }
    recv(tp, tonumber(receiver), tonumber(sender), ffi::cast(ubuft, p))
    return true
})

/**
    Shows a message on the client, coming from the server (this only works
    serverside). You need to provide a client number or a client entity, a
    message title and a message text.
*/
M.show_client_message = @[server,func(cn, title, text) {
    cn = typeof cn == "table" && cn.cn || cn
    assert(cn)
    capi::personal_servmsg(cn, title, text)
}]

return M
